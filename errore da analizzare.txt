Ciao, questo è il mio progetto in esp-idf su platformio 
ho un main:
#include "wifi_manager.h"
#include "web_server.h"
#include "http_client.h"
#include "gpio_handler.h"
#include "esp_log.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "nvs_flash.h"
#include "esp_err.h"
#include "nvs.h"

static const char *TAG = "Main";

extern "C" void app_main(void) {
    // Inizializza NVS
    esp_err_t ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
        ESP_ERROR_CHECK(nvs_flash_erase());
        ret = nvs_flash_init();
    }
    ESP_ERROR_CHECK(ret);

    // Inizializza Wi-Fi Manager
    wifi_manager_init();

    if (wifi_manager_credentials_exist()) {
        // Leggi le credenziali da NVS
        nvs_handle_t nvs_handle;
        char ssid[32];
        char password[64];
        size_t ssid_len = sizeof(ssid);
        size_t password_len = sizeof(password);

        esp_err_t err = nvs_open("wifi_credentials", NVS_READONLY, &nvs_handle);
        if (err != ESP_OK) {
            ESP_LOGE(TAG, "Errore nell'apertura dell'NVS: %s", esp_err_to_name(err));
            // Gestisci l'errore
            wifi_manager_start_ap();
            web_server_start();
            return;
        }

        // Lettura dell'SSID
        err = nvs_get_str(nvs_handle, "ssid", ssid, &ssid_len);
        if (err != ESP_OK) {
            ESP_LOGE(TAG, "Errore nel recupero dell'SSID: %s", esp_err_to_name(err));
            nvs_close(nvs_handle);
            wifi_manager_start_ap();
            web_server_start();
            return;
        }

        // Lettura della Password
        err = nvs_get_str(nvs_handle, "password", password, &password_len);
        if (err != ESP_OK) {
            ESP_LOGE(TAG, "Errore nel recupero della password: %s", esp_err_to_name(err));
            nvs_close(nvs_handle);
            wifi_manager_start_ap();
            web_server_start();
            return;
        }

        nvs_close(nvs_handle);

        ESP_LOGI(TAG, "Connessione alla rete Wi-Fi: %s", ssid);
        err = wifi_manager_connect(ssid, password);
        if (err != ESP_OK) {
            ESP_LOGE(TAG, "Errore nella connessione Wi-Fi: %s", esp_err_to_name(err));
            // Gestisci l'errore
            wifi_manager_start_ap();
            web_server_start();
            return;
        }

        // Attendi la connessione Wi-Fi
        wifi_manager_wait_for_connection();

        // Inizializza GPIO
        gpio_handler_init();

        // Avvia il task HTTP Client
        xTaskCreate(&http_client_task, "http_client_task", 8192, NULL, 5, NULL);

         // Esempio di loop per leggere gli input ADC
        while (1) {
            int adc_value0 = gpio_handler_read_adc_channel0();
            int adc_value3 = gpio_handler_read_adc_channel3();
            ESP_LOGI(TAG, "ADC Channel 0: %d, ADC Channel 3: %d", adc_value0, adc_value3);

            // Esegui altre operazioni...
            
            vTaskDelay(pdMS_TO_TICKS(1000)); // Attendi 1 secondo
        }

        // Deinizializza ADC quando non più necessario
        gpio_handler_deinit();

    } else {
        // Avvia Wi-Fi AP e Web Server per la configurazione
        wifi_manager_start_ap();
        web_server_start();
    }
}


e le librerie
your_project/
├── include/  // You can omit this if not needed
├── lib/
│   ├── wifi_manager/
│   │   └── wifi_manager.h
│   │   └── wifi_manager.c
│   ├── web_server/
│   │   └── web_server.h
│   │   └── web_server.c
│   ├── http_client/
│   │   └── http_client.h
│   │   └── http_client.c
│   └── gpio_handler/
│       └── gpio_handler.h
│       └── gpio_handler.c
├── src/
│   └── main.cpp
└── platformio.ini


wifi_manager.c 
#include <string.h>
#include "nvs_flash.h"
#include "esp_event.h"
#include "esp_netif.h"
#include "wifi_manager.h"
#include "esp_wifi.h"
#include "esp_log.h"
#include "freertos/FreeRTOS.h"
#include "freertos/event_groups.h"

static const char *TAG = "WiFi_Manager";
static EventGroupHandle_t wifi_event_group;
const int WIFI_CONNECTED_BIT = BIT0;

static void wifi_event_handler(void *arg, esp_event_base_t event_base,
                               int32_t event_id, void *event_data) {
    if (event_base == WIFI_EVENT) {
        switch(event_id) {
            case WIFI_EVENT_STA_START:
                esp_wifi_connect();
                break;
            case WIFI_EVENT_STA_DISCONNECTED:
                ESP_LOGI(TAG, "Disconnesso dal Wi-Fi, riconnessione in corso...");
                esp_wifi_connect();
                xEventGroupClearBits(wifi_event_group, WIFI_CONNECTED_BIT);
                break;
            default:
                break;
        }
    } else if (event_base == IP_EVENT && event_id == IP_EVENT_STA_GOT_IP) {
        ip_event_got_ip_t* event = (ip_event_got_ip_t*) event_data;
        ESP_LOGI(TAG, "Indirizzo IP ottenuto: " IPSTR, IP2STR(&event->ip_info.ip));
        xEventGroupSetBits(wifi_event_group, WIFI_CONNECTED_BIT);
    }
}

void wifi_manager_init(void) {
    wifi_event_group = xEventGroupCreate();

    ESP_ERROR_CHECK(esp_netif_init());

    ESP_ERROR_CHECK(esp_event_loop_create_default());

    // Inizializza interfacce Wi-Fi di default
    esp_netif_create_default_wifi_sta();
    esp_netif_create_default_wifi_ap();

    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    ESP_ERROR_CHECK(esp_wifi_init(&cfg));

    // Registra gestori di eventi
    ESP_ERROR_CHECK(esp_event_handler_instance_register(
        WIFI_EVENT, ESP_EVENT_ANY_ID, &wifi_event_handler, NULL, NULL));
    ESP_ERROR_CHECK(esp_event_handler_instance_register(
        IP_EVENT, IP_EVENT_STA_GOT_IP, &wifi_event_handler, NULL, NULL));
}

esp_err_t wifi_manager_connect(const char *ssid, const char *password) {
    wifi_config_t wifi_config = {0};
    strncpy((char *)wifi_config.sta.ssid, ssid, sizeof(wifi_config.sta.ssid) - 1);
    strncpy((char *)wifi_config.sta.password, password, sizeof(wifi_config.sta.password) - 1);

    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));
    ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &wifi_config));

    ESP_ERROR_CHECK(esp_wifi_start());

    return ESP_OK;
}

void wifi_manager_start_ap(void) {
    wifi_config_t wifi_config = {0};
    strncpy((char *)wifi_config.ap.ssid, "ESP32_Config", sizeof(wifi_config.ap.ssid) - 1);
    wifi_config.ap.ssid_len = strlen("ESP32_Config");
    strncpy((char *)wifi_config.ap.password, "12345678", sizeof(wifi_config.ap.password) - 1);
    wifi_config.ap.max_connection = 4;
    wifi_config.ap.authmode = WIFI_AUTH_WPA_WPA2_PSK;

    if (strlen((char *)wifi_config.ap.password) < 8) {
        wifi_config.ap.authmode = WIFI_AUTH_OPEN;
    }

    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_AP));
    ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_AP, &wifi_config));
    ESP_ERROR_CHECK(esp_wifi_start());

    ESP_LOGI(TAG, "Wi-Fi AP avviato. SSID:%s", wifi_config.ap.ssid);
}

void wifi_manager_erase_credentials(void) {
    nvs_handle_t nvs_handle;
    ESP_ERROR_CHECK(nvs_open("wifi_credentials", NVS_READWRITE, &nvs_handle));
    ESP_ERROR_CHECK(nvs_erase_all(nvs_handle));
    ESP_ERROR_CHECK(nvs_commit(nvs_handle));
    nvs_close(nvs_handle);
    ESP_LOGI(TAG, "Credenziali Wi-Fi cancellate.");
}

int wifi_manager_credentials_exist(void) {
    nvs_handle_t nvs_handle;
    esp_err_t err;
    char ssid[32];
    size_t ssid_len = sizeof(ssid);

    err = nvs_open("wifi_credentials", NVS_READONLY, &nvs_handle);
    if (err != ESP_OK) {
        return 0; // Credenziali non esistono
    }

    err = nvs_get_str(nvs_handle, "ssid", ssid, &ssid_len);
    nvs_close(nvs_handle);

    if (err == ESP_OK && ssid_len > 0)
        return 1; // Credenziali esistono
    else
        return 0; // Credenziali non esistono
}

void wifi_manager_wait_for_connection(void) {
    xEventGroupWaitBits(wifi_event_group, WIFI_CONNECTED_BIT,
                        pdFALSE, pdTRUE, portMAX_DELAY);
}

http_client.c 
#include <inttypes.h>

#include "http_client.h"
#include "esp_http_client.h"
#include "esp_log.h"

static const char *TAG = "HTTP_Client";

void http_client_init(void) {
    // Codice di inizializzazione se necessario
}

void http_client_task(void *param) {
    const char *server_url = "http://192.168.1.132:5001/endpoint"; // Sostituisci con l'indirizzo corretto

    while (1) {
        // Esegui HTTP GET
        esp_http_client_config_t config = {
            .url = server_url,
        };
        esp_http_client_handle_t client = esp_http_client_init(&config);

        esp_err_t err = esp_http_client_perform(client);
        if (err == ESP_OK) {
            ESP_LOGI(TAG, "HTTP GET Status = %d, content_length = %" PRId64,
                     esp_http_client_get_status_code(client),
                     esp_http_client_get_content_length(client));
        } else {
            ESP_LOGE(TAG, "HTTP GET request failed: %s", esp_err_to_name(err));
        }
        esp_http_client_cleanup(client);

        // Delay before next request
        vTaskDelay(pdMS_TO_TICKS(10000)); // Delay 10 seconds
    }
}

web server 
#include "web_server.h"
#include "esp_log.h"
#include "esp_http_server.h"
#include "wifi_manager.h"
#include <string.h>
#include "nvs_flash.h"
#include "nvs.h"
#include "esp_err.h"

static const char *TAG = "Web_Server";
static httpd_handle_t server = NULL;

// Funzione per decodificare URL
void url_decode(char *str) {
    char *pstr = str, *buf = str;
    char hex[3];
    while (*pstr) {
        if (*pstr == '%') {
            if (pstr[1] && pstr[2]) {
                hex[0] = pstr[1];
                hex[1] = pstr[2];
                hex[2] = '\0';
                *buf++ = (char) strtol(hex, NULL, 16);
                pstr += 2;
            }
        } else if (*pstr == '+') {
            *buf++ = ' ';
        } else {
            *buf++ = *pstr;
        }
        pstr++;
    }
    *buf = '\0';
}


avevo questo errroe quidni ho rinominato il namnspace con wifi_config. Mi dici se va tutto bene opppure ha qualc'altro che non funziona ?
// Handler per la richiesta GET (pagina HTML)
static esp_err_t wifi_config_get_handler(httpd_req_t *req) {
    const char* resp_str = "<!DOCTYPE html>"
    "<html>"
    "<body>"
    "<form action=\"/wifi_config\" method=\"post\">"
    "SSID:<br>"
    "<input type=\"text\" name=\"ssid\"><br>"
    "Password:<br>"
    "<input type=\"password\" name=\"password\"><br><br>"
    "<input type=\"submit\" value=\"Submit\">"
    "</form>"
    "</body>"
    "</html>";

    httpd_resp_send(req, resp_str, HTTPD_RESP_USE_STRLEN);

    return ESP_OK;
}

// Handler per la richiesta POST (salva credenziali)
esp_err_t wifi_config_post_handler(httpd_req_t *req)
{
    char buf[200];
    int ret, remaining = req->content_len;

    if (remaining >= sizeof(buf)) {
        ESP_LOGE(TAG, "Contenuto troppo lungo");
        httpd_resp_send_err(req, HTTPD_400_BAD_REQUEST, "Contenuto troppo lungo");
        return ESP_FAIL;
    }

    ret = httpd_req_recv(req, buf, remaining);
    if (ret <= 0) {
        ESP_LOGE(TAG, "Errore nel ricevere i dati");
        httpd_resp_send_err(req, HTTPD_500_INTERNAL_SERVER_ERROR, "Errore nel ricevere i dati");
        return ESP_FAIL;
    }

    buf[ret] = '\0'; // Termina la stringa

    // Parsing dei dati del form
    char ssid[32] = {0};
    char password[64] = {0};

    char *ssid_ptr = strstr(buf, "ssid=");
    char *password_ptr = strstr(buf, "password=");

    if (ssid_ptr && password_ptr) {
        ssid_ptr += 5; // Salta "ssid="
        char *ampersand = strchr(ssid_ptr, '&');
        if (ampersand) {
            *ampersand = '\0';
        }

        strncpy(ssid, ssid_ptr, sizeof(ssid) - 1);

        password_ptr += 9; // Salta "password="
        strncpy(password, password_ptr, sizeof(password) - 1);

        // Decodifica URL
        url_decode(ssid);
        url_decode(password);
    } else {
        ESP_LOGE(TAG, "Errore nel parsing dei dati del form");
        httpd_resp_send_err(req, HTTPD_400_BAD_REQUEST, "Dati del form non validi");
        return ESP_FAIL;
    }

    // Salva SSID e password nell'NVS
    nvs_handle_t nvs_handle;
    esp_err_t err = nvs_open("wifi_config", NVS_READWRITE, &nvs_handle);
    if (err != ESP_OK) {
        ESP_LOGE(TAG, "Errore nell'apertura dell'NVS: %s", esp_err_to_name(err));
        httpd_resp_send_err(req, HTTPD_500_INTERNAL_SERVER_ERROR, "Errore nell'apertura dell'NVS");
        return ESP_FAIL;
    }

    // Scrivi SSID e Password nell'NVS
    err = nvs_set_str(nvs_handle, "ssid", ssid);
    if (err != ESP_OK) {
        ESP_LOGE(TAG, "Errore nel settare l'SSID nell'NVS: %s", esp_err_to_name(err));
        nvs_close(nvs_handle);
        httpd_resp_send_err(req, HTTPD_500_INTERNAL_SERVER_ERROR, "Errore nel salvare l'SSID");
        return ESP_FAIL;
    }

    err = nvs_set_str(nvs_handle, "password", password);
    if (err != ESP_OK) {
        ESP_LOGE(TAG, "Errore nel settare la password nell'NVS: %s", esp_err_to_name(err));
        nvs_close(nvs_handle);
        httpd_resp_send_err(req, HTTPD_500_INTERNAL_SERVER_ERROR, "Errore nel salvare la password");
        return ESP_FAIL;
    }

    // Esegui il commit delle modifiche
    err = nvs_commit(nvs_handle);
    if (err != ESP_OK) {
        ESP_LOGE(TAG, "Errore nel commit dell'NVS: %s", esp_err_to_name(err));
        nvs_close(nvs_handle);
        httpd_resp_send_err(req, HTTPD_500_INTERNAL_SERVER_ERROR, "Errore nel salvare le credenziali");
        return ESP_FAIL;
    }

    // Chiudi l'handle NVS
    nvs_close(nvs_handle);

    // Invia una risposta al client
    httpd_resp_send(req, "Credenziali ricevute e salvate. Riavvio in corso...", HTTPD_RESP_USE_STRLEN);

    // Riavvia per applicare le nuove impostazioni Wi-Fi
    esp_restart();

    return ESP_OK;
}

// Handler per cancellare le credenziali Wi-Fi
static esp_err_t wifi_config_delete_handler(httpd_req_t *req) {
    wifi_manager_erase_credentials();
    httpd_resp_send(req, "Credenziali Wi-Fi cancellate. Riavvio in corso...", HTTPD_RESP_USE_STRLEN);

    // Riavvia
    esp_restart();

    return ESP_OK;
}

void web_server_start(void) {
    httpd_config_t config = HTTPD_DEFAULT_CONFIG();

    if (httpd_start(&server, &config) == ESP_OK) {
        // Handler GET per la pagina di configurazione
        httpd_uri_t wifi_config_get_uri = {
            .uri = "/",
            .method = HTTP_GET,
            .handler = wifi_config_get_handler,
            .user_ctx = NULL
        };
        httpd_register_uri_handler(server, &wifi_config_get_uri);

        // Handler POST per ricevere le credenziali Wi-Fi
        httpd_uri_t wifi_config_post_uri = {
            .uri = "/wifi_config",
            .method = HTTP_POST,
            .handler = wifi_config_post_handler,
            .user_ctx = NULL
        };
        httpd_register_uri_handler(server, &wifi_config_post_uri);

        // Handler POST per cancellare le credenziali
        httpd_uri_t wifi_config_delete_uri = {
            .uri = "/wifi_config/delete",
            .method = HTTP_POST,
            .handler = wifi_config_delete_handler,
            .user_ctx = NULL
        };
        httpd_register_uri_handler(server, &wifi_config_delete_uri);

        ESP_LOGI(TAG, "Web server avviato.");
    } else {
        ESP_LOGE(TAG, "Impossibile avviare il web server.");
    }
}

void web_server_stop(void) {
    if (server) {
        httpd_stop(server);
        ESP_LOGI(TAG, "Web server fermato.");
    }
}

mi dai tutto il codice modificato e mi modifichi anche il main 
#include "wifi_manager.h"
#include "web_server.h"
#include "http_client.h"
#include "gpio_handler.h"
#include "esp_log.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "nvs_flash.h"
#include "esp_err.h"
#include "nvs.h"

static const char *TAG = "Main";

extern "C" void app_main(void) {
    // Inizializza NVS
    esp_err_t ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
        ESP_ERROR_CHECK(nvs_flash_erase());
        ret = nvs_flash_init();
    }
    ESP_ERROR_CHECK(ret);

    // Inizializza Wi-Fi Manager
    wifi_manager_init();

    if (wifi_manager_credentials_exist()) {
        // Leggi le credenziali da NVS
        nvs_handle_t nvs_handle;
        char ssid[32];
        char password[64];
        size_t ssid_len = sizeof(ssid);
        size_t password_len = sizeof(password);

        esp_err_t err = nvs_open("wifi_config", NVS_READONLY, &nvs_handle);
        if (err != ESP_OK) {
            ESP_LOGE(TAG, "Errore nell'apertura dell'NVS: %s", esp_err_to_name(err));
            // Gestisci l'errore
            wifi_manager_start_ap();
            web_server_start();
            return;
        }

        // Lettura dell'SSID
        err = nvs_get_str(nvs_handle, "ssid", ssid, &ssid_len);
        if (err != ESP_OK) {
            ESP_LOGE(TAG, "Errore nel recupero dell'SSID: %s", esp_err_to_name(err));
            nvs_close(nvs_handle);
            wifi_manager_start_ap();
            web_server_start();
            return;
        }

        // Lettura della Password
        err = nvs_get_str(nvs_handle, "password", password, &password_len);
        if (err != ESP_OK) {
            ESP_LOGE(TAG, "Errore nel recupero della password: %s", esp_err_to_name(err));
            nvs_close(nvs_handle);
            wifi_manager_start_ap();
            web_server_start();
            return;
        }

        nvs_close(nvs_handle);

        ESP_LOGI(TAG, "Connessione alla rete Wi-Fi: %s", ssid);
        err = wifi_manager_connect(ssid, password);
        if (err != ESP_OK) {
            ESP_LOGE(TAG, "Errore nella connessione Wi-Fi: %s", esp_err_to_name(err));
            // Gestisci l'errore
            wifi_manager_start_ap();
            web_server_start();
            return;
        }

        // Attendi la connessione Wi-Fi
        wifi_manager_wait_for_connection();

        // Inizializza GPIO
        gpio_handler_init();

        // Avvia il task HTTP Client
        xTaskCreate(&http_client_task, "http_client_task", 8192, NULL, 5, NULL);

         // Esempio di loop per leggere gli input ADC
        while (1) {
            int adc_value0 = gpio_handler_read_adc_channel0();
            int adc_value3 = gpio_handler_read_adc_channel3();
            ESP_LOGI(TAG, "ADC Channel 0: %d, ADC Channel 3: %d", adc_value0, adc_value3);

            // Esegui altre operazioni...
            
            vTaskDelay(pdMS_TO_TICKS(1000)); // Attendi 1 secondo
        }

        // Deinizializza ADC quando non più necessario
        gpio_handler_deinit();

    } else {
        // Avvia Wi-Fi AP e Web Server per la configurazione
        wifi_manager_start_ap();
        web_server_start();
    }
}

perchè mi da questo errore?



I (725) wifi:mode : softAP (44:17:93:7d:a6:11)
I (725) wifi:Total power save buffer number: 16
I (735) wifi:Init max length of beacon: 752/752
I (735) wifi:Init max length of beacon: 752/752
␛[0;32mI (735) WiFi_Manager: Wi-Fi AP avviato. SSID:ESP32_Config␛[0m
␛[0;32mI (735) esp_netif_lwip: DHCP server started on interface WIFI_AP_DEF with IP: 192.168.4.1␛[0m
␛[0;32mI (755) Web_Server: Web server avviato.␛[0m
␛[0;32mI (755) main_task: Returned from app_main()␛[0m
I (113165) wifi:new:<1,1>, old:<1,1>, ap:<1,1>, sta:<255,255>, prof:1, snd_ch_cfg:0x0
I (113165) wifi:station: e6:23:78:5b:1f:c0 join, AID=1, bgn, 40U
␛[0;32mI (114215) esp_netif_lwip: DHCP server assigned IP to a client, IP is: 192.168.4.2␛[0m
I (114285) wifi:<ba-add>idx:2 (ifx:1, e6:23:78:5b:1f:c0), tid:0, ssn:19, winSize:64
␛[0;33mW (140445) httpd_uri: httpd_uri: URI '/wifi-config' not found␛[0m
␛[0;33mW (140445) httpd_txrx: httpd_resp_send_err: 404 Not Found - Nothing matches the given URI␛[0m
␛[0;33mW (189325) httpd_uri: httpd_uri: URI '/wifi-config' not found␛[0m
␛[0;33mW (189325) httpd_txrx: httpd_resp_send_err: 404 Not Found - Nothing matches the given URI␛[0m
I (354575) wifi:station: e6:23:78:5b:1f:c0 leave, AID = 1, reason = 1, bss_flags is 756835, bss:0x3ffb9adc
I (354575) wifi:new:<1,0>, old:<1,1>, ap:<1,1>, sta:<255,255>, prof:1, snd_ch_cfg:0x0
I (354585) wifi:<ba-del>idx:2, tid:0
I (451225) wifi:new:<1,1>, old:<1,0>, ap:<1,1>, sta:<255,255>, prof:1, snd_ch_cfg:0x0
I (451235) wifi:station: e6:23:78:5b:1f:c0 join, AID=1, bgn, 40U
␛[0;32mI (452275) esp_netif_lwip: DHCP server assigned IP to a client, IP is: 192.168.4.2␛[0m
I (452465) wifi:<ba-add>idx:2 (ifx:1, e6:23:78:5b:1f:c0), tid:0, ssn:21, winSize:64
␛[0;31mE (464315) Web_Server: Errore nel parsing dei dati del form␛[0m
␛[0;33mW (464315) httpd_txrx: httpd_resp_send_err: 400 Bad Request - Dati del form non validi␛[0m
␛[0;33mW (464325) httpd_uri: httpd_uri: uri handler execution failed␛[0m
␛[0;31mE (539855) Web_Server: Errore nell'apertura dell'NVS: ESP_ERR_NVS_KEY_TOO_LONG␛[0m
␛[0;33mW (539855) httpd_txrx: httpd_resp_send_err: 500 Internal Server Error - Errore nell'apertura dell'NVS␛[0m
␛[0;33mW (539865) httpd_uri: httpd_uri: uri handler execution failed␛[0m