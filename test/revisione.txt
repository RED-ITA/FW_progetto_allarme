Ciao sto sviluppando un programma per esp32 basasto sul esp-idf sviluppato con platformio sulla bord denky32, che mi permette di creare un sensore smart per la casa.

il mio sensore deve avviarsi in modalità AP in caso non sia configurata la rete e aspettare che arrivi la configurazione, successivamente quando arriva deve salvarla e passare alla modaltà standard, dove
deve prima collegarsi ala wifi puoi eseguire determiante funzioni con il webserver che si trova su di un indirzzo che ancora non definito ma la porta è la 5001. Una volta eseguite queste determinate operaizoni deve passare ad un stato di loop 
in cui legge gli input su due pin specifici convertendoli dall'ADC e poi passa aggioran il server con altre funzioni sempre in loop, ma questo lo sviluppo più avanti però vorrei una base di programma che faccia tutte queste cose da dover solo sisteamre poi


Attualemtne non funzione nulla però ti descrivo quello che ho scritto 

le cartelle sono così composte e il compliatore da successo: 

your_project/
├── include/  // You can omit this if not needed
├── lib/
│   ├── wifi_manager/
│   │   └── wifi_manager.h
│   │   └── wifi_manager.c
│   ├── web_server/
│   │   └── web_server.h
│   │   └── web_server.c
│   ├── http_client/
│   │   └── http_client.h
│   │   └── http_client.c
│   └── gpio_handler/
│       └── gpio_handler.h
│       └── gpio_handler.c
├── src/
│   └── main.cpp
└── platformio.ini

questi sono i miei programmi: 
mian.cpp
#include "wifi_manager.h"
#include "web_server.h"
#include "http_client.h"
#include "gpio_handler.h"
#include "esp_log.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "nvs_flash.h"
#include "esp_err.h"
#include "nvs.h"

static const char *TAG = "Main";
extern "C" void app_main(void) {
    // Inizializza NVS
    esp_err_t ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
        ESP_ERROR_CHECK(nvs_flash_erase());
        ret = nvs_flash_init();
    }
    ESP_ERROR_CHECK(ret);

    // Inizializza Wi-Fi Manager
    wifi_manager_init();

    if (wifi_manager_credentials_exist()) {
        nvs_handle_t nvs_handle;
        char ssid[32];
        char password[64];
        size_t ssid_len = sizeof(ssid);
        size_t password_len = sizeof(password);

        esp_err_t err = nvs_open("wifi_credentials", NVS_READONLY, &nvs_handle);
        if (err != ESP_OK) {
            ESP_LOGE(TAG, "Errore nell'apertura dell'NVS: %s", esp_err_to_name(err));
            // Gestisci l'errore
            wifi_manager_start_ap();
            web_server_start();
            return;
        }

        // Lettura dell'SSID
        err = nvs_get_str(nvs_handle, "ssid", ssid, &ssid_len);
        if (err != ESP_OK) {
            ESP_LOGE(TAG, "Errore nel recupero dell'SSID: %s", esp_err_to_name(err));
            nvs_close(nvs_handle);
            wifi_manager_start_ap();
            web_server_start();
            return;
        }

        // Lettura della Password
        err = nvs_get_str(nvs_handle, "password", password, &password_len);
        if (err != ESP_OK) {
            ESP_LOGE(TAG, "Errore nel recupero della password: %s", esp_err_to_name(err));
            nvs_close(nvs_handle);
            wifi_manager_start_ap();
            web_server_start();
            return;
        }

        nvs_close(nvs_handle);

        ESP_LOGI(TAG, "Connessione alla rete Wi-Fi: %s", ssid);
        err = wifi_manager_connect(ssid, password);
        if (err != ESP_OK) {
            ESP_LOGE(TAG, "Errore nella connessione Wi-Fi: %s", esp_err_to_name(err));
            // Gestisci l'errore
            wifi_manager_start_ap();
            web_server_start();
            return;
        }

        // Attendi la connessione Wi-Fi
        wait_for_wifi_connection();

        // Inizializza GPIO
        gpio_handler_init();

        // Avvia il task HTTP Client
        xTaskCreate(&http_client_task, "http_client_task", 8192, NULL, 5, NULL);
    } else {
        // Avvia Wi-Fi AP e Web Server per la configurazione
        wifi_manager_start_ap();
        web_server_start();
    }
}


wifi_manager.c
#include <string.h>
#include "nvs_flash.h"
#include "esp_event.h"
#include "esp_netif.h"
#include "wifi_manager.h"
#include "esp_wifi.h"
#include "esp_log.h"

static const char *TAG = "WiFi_Manager";

static void wifi_event_handler(void *arg, esp_event_base_t event_base,
                               int32_t event_id, void *event_data) {
    // Handle Wi-Fi events here
}

void wifi_manager_init(void) {
    esp_err_t ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES ||
        ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
        ESP_ERROR_CHECK(nvs_flash_erase());
        ESP_ERROR_CHECK(nvs_flash_init());
    }

    ESP_ERROR_CHECK(esp_netif_init());

    ESP_ERROR_CHECK(esp_event_loop_create_default());

    // Initialize default Wi-Fi interface
    esp_netif_create_default_wifi_sta();
    esp_netif_create_default_wifi_ap();

    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    ESP_ERROR_CHECK(esp_wifi_init(&cfg));

    // Register event handler
    ESP_ERROR_CHECK(esp_event_handler_instance_register(
        WIFI_EVENT, ESP_EVENT_ANY_ID, &wifi_event_handler, NULL, NULL));
}

esp_err_t wifi_manager_connect(const char *ssid, const char *password) {
    wifi_config_t wifi_config = {0};
    strncpy((char *)wifi_config.sta.ssid, ssid, sizeof(wifi_config.sta.ssid) - 1);
    strncpy((char *)wifi_config.sta.password, password, sizeof(wifi_config.sta.password) - 1);

    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));
    ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &wifi_config));

    return esp_wifi_start();
}

void wifi_manager_start_ap(void) {
    wifi_config_t wifi_config = {0};
    strncpy((char *)wifi_config.ap.ssid, "ESP32_Config", sizeof(wifi_config.ap.ssid) - 1);
    wifi_config.ap.ssid_len = strlen("ESP32_Config");
    strncpy((char *)wifi_config.ap.password, "12345678", sizeof(wifi_config.ap.password) - 1);
    wifi_config.ap.max_connection = 4;
    wifi_config.ap.authmode = WIFI_AUTH_WPA_WPA2_PSK;

    if (strlen((char *)wifi_config.ap.password) < 8) {
        wifi_config.ap.authmode = WIFI_AUTH_OPEN;
    }

    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_AP));
    ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_AP, &wifi_config));
    ESP_ERROR_CHECK(esp_wifi_start());

    ESP_LOGI(TAG, "Wi-Fi AP started. SSID:%s", wifi_config.ap.ssid);
}

void wifi_manager_erase_credentials(void) {
    nvs_handle_t nvs_handle;
    ESP_ERROR_CHECK(nvs_open("wifi_credentials", NVS_READWRITE, &nvs_handle));
    ESP_ERROR_CHECK(nvs_erase_all(nvs_handle));
    ESP_ERROR_CHECK(nvs_commit(nvs_handle));
    nvs_close(nvs_handle);
    ESP_LOGI(TAG, "Wi-Fi credentials erased.");
}

int wifi_manager_credentials_exist(void) {
    nvs_handle_t nvs_handle;
    esp_err_t err;
    char ssid[32];
    size_t ssid_len = sizeof(ssid);

    err = nvs_open("wifi_credentials", NVS_READONLY, &nvs_handle);
    if (err == ESP_ERR_NVS_NOT_FOUND) {
        return 1;
    }

    err = nvs_get_str(nvs_handle, "ssid", ssid, &ssid_len);
    nvs_close(nvs_handle);

    if (err == ESP_OK)
        return 0;
    else
        return 1;
}


web_server.c
#include "web_server.h"
#include "esp_log.h"
#include "esp_http_server.h"
#include "wifi_manager.h"
#include <string.h>
#include "nvs_flash.h"    // Aggiungi questo include
#include "nvs.h"          // Aggiungi questo include
#include "esp_err.h"
#include "esp_log.h"

static const char *TAG = "Web_Server";
static httpd_handle_t server = NULL;

// Handler for Wi-Fi configuration POST request

esp_err_t wifi_config_post_handler(httpd_req_t *req)
{
    char ssid[32];
    size_t ssid_len = req->content_len;

    // Ricevi l'SSID dal client
    int ret = httpd_req_recv(req, ssid, ssid_len);
    if (ret <= 0) {
        ESP_LOGE(TAG, "Errore nel ricevere l'SSID");
        httpd_resp_send_err(req, HTTPD_500_INTERNAL_SERVER_ERROR, "Errore nel ricevere l'SSID");
        return ESP_FAIL;
    }

    ssid[ssid_len] = '\0'; // Termina la stringa SSID con '\0'

    // Apri un handle NVS
    nvs_handle_t nvs_handle;
    esp_err_t err = nvs_open("wifi_credentials", NVS_READWRITE, &nvs_handle);
    if (err != ESP_OK) {
        ESP_LOGE(TAG, "Errore nell'apertura dell'NVS: %s", esp_err_to_name(err));
        httpd_resp_send_err(req, HTTPD_500_INTERNAL_SERVER_ERROR, "Errore nell'apertura dell'NVS");
        return ESP_FAIL;
    }

    // Scrivi l'SSID nell'NVS
    err = nvs_set_str(nvs_handle, "ssid", ssid);
    if (err != ESP_OK) {
        ESP_LOGE(TAG, "Errore nel settare l'SSID nell'NVS: %s", esp_err_to_name(err));
        nvs_close(nvs_handle);
        httpd_resp_send_err(req, HTTPD_500_INTERNAL_SERVER_ERROR, "Errore nel salvare l'SSID");
        return ESP_FAIL;
    }

    // Esegui il commit delle modifiche
    err = nvs_commit(nvs_handle);
    if (err != ESP_OK) {
        ESP_LOGE(TAG, "Errore nel commit dell'NVS: %s", esp_err_to_name(err));
        nvs_close(nvs_handle);
        httpd_resp_send_err(req, HTTPD_500_INTERNAL_SERVER_ERROR, "Errore nel salvare le credenziali");
        return ESP_FAIL;
    }

    // Chiudi l'handle NVS
    nvs_close(nvs_handle);

    // Invia una risposta al client
    httpd_resp_send(req, "SSID ricevuto e salvato", HTTPD_RESP_USE_STRLEN);

    return ESP_OK;
}

// Handler for deleting Wi-Fi credentials
static esp_err_t wifi_config_delete_handler(httpd_req_t *req) {
    wifi_manager_erase_credentials();
    httpd_resp_send(req, "Wi-Fi credentials deleted. Rebooting...", HTTPD_RESP_USE_STRLEN);

    // Optionally, schedule a reboot
    esp_restart();

    return ESP_OK;
}

void web_server_start(void) {
    httpd_config_t config = HTTPD_DEFAULT_CONFIG();

    if (httpd_start(&server, &config) == ESP_OK) {
        httpd_uri_t wifi_config_post_uri = {
            .uri = "/wifi_config",
            .method = HTTP_POST,
            .handler = wifi_config_post_handler,
            .user_ctx = NULL
        };
        httpd_register_uri_handler(server, &wifi_config_post_uri);

        httpd_uri_t wifi_config_delete_uri = {
            .uri = "/wifi_config/delete",
            .method = HTTP_POST,
            .handler = wifi_config_delete_handler,
            .user_ctx = NULL
        };
        httpd_register_uri_handler(server, &wifi_config_delete_uri);

        ESP_LOGI(TAG, "Web server started.");
    } else {
        ESP_LOGE(TAG, "Failed to start web server.");
    }
}

void web_server_stop(void) {
    if (server) {
        httpd_stop(server);
        ESP_LOGI(TAG, "Web server stopped.");
    }
}


http_client.c
#include <inttypes.h>

#include "http_client.h"
#include "esp_http_client.h"
#include "esp_log.h"

static const char *TAG = "HTTP_Client";

void http_client_init(void) {
    // Initialization code if needed
}

void http_client_task(void *param) {
    const char *server_url = "http://your_server_ip:5001/endpoint";

    while (1) {
        // Perform HTTP GET
        esp_http_client_config_t config = {
            .url = server_url,
        };
        esp_http_client_handle_t client = esp_http_client_init(&config);

        esp_err_t err = esp_http_client_perform(client);
        if (esp_http_client_perform(client) == ESP_OK) {
        ESP_LOGI(TAG, "HTTP GET Status = %d, content_length = %" PRId64,
                 esp_http_client_get_status_code(client),
                 esp_http_client_get_content_length(client));
        } else {
            ESP_LOGE(TAG, "HTTP GET request failed: %s", esp_err_to_name(err));
        }
        esp_http_client_cleanup(client);

        // Perform HTTP POST if needed
        // ...

        // Delay before next request
        vTaskDelay(pdMS_TO_TICKS(10000)); // Delay 10 seconds
    }
}

gpio_handler.c
#include "gpio_handler.h"
#include "driver/gpio.h"

#define INPUT_GPIO_PIN  GPIO_NUM_4  // Adjust as needed

void gpio_handler_init(void) {
    gpio_config_t io_conf = {
        .pin_bit_mask = (1ULL << INPUT_GPIO_PIN),
        .mode = GPIO_MODE_INPUT,
        .pull_up_en = GPIO_PULLUP_DISABLE,
        .pull_down_en = GPIO_PULLDOWN_ENABLE,
        .intr_type = GPIO_INTR_DISABLE,
    };
    gpio_config(&io_conf);
}

int gpio_handler_read_input(void) {
    return gpio_get_level(INPUT_GPIO_PIN);
}



dato che conosci il mio progetto mi puoi sistemare tutto il progetto per fare quello che voglio io e in maniera corretta? 
